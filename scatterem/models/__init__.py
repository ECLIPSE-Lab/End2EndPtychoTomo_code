# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/models.__init__.ipynb.

# %% auto 0
__all__ = ['BaseModel', 'MultiSlicePtychographyTomographyModel']

# %% ../../nbs/models.__init__.ipynb 1
import torch as th
from torch import nn
from abc import ABC, abstractmethod
from collections.abc import Callable
from typing import List, Union


class BaseModel(ABC):
    object_model: Callable[[th.Tensor, th.Tensor, th.Tensor, th.Tensor, th.Tensor, int, List], th.Tensor]
    measurement_model: Callable[[th.Tensor, th.Tensor, th.Tensor, th.Tensor, Callable, float], th.Tensor]
    loss_function: Callable
    object: th.Tensor
    probe: List[th.Tensor]
    dr: List[th.Tensor]
    error_norm: List[th.Tensor]
    tau1: float
    tau2: float
    positions: List[th.Tensor]
    angles: th.Tensor
    translations: th.Tensor
    start_end_model: List
    positions: th.Tensor
    propagator: Callable
    braggpix: int
    butterorder: int
    dx: float
    bin_factor: int
    intensity_scaling_factor: float

    @abstractmethod
    def __call__(self, object, probe, positions, dr, angle=None, translation=None, bin_factor=None, start_end=None,
                 propagator=None, factor=1):  # *args, **kwargs):
        return None

    @abstractmethod
    def scale_probe_gradient(self, probe):
        pass

    @abstractmethod
    def scale_object_gradient(self, object):
        pass


from .single_slice_ptychography import SingleSlicePtychographyModel
from .multi_slice_ptychography import MultiSlicePtychographyModel
from .multi_slice_ptycho_tomography import MultiSlicePtychographyTomographyModel
